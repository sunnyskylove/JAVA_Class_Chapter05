package com.ohgiraffers.section01.array;

public class Application01 {

    public static void main(String[] args) {

        /* 수업목표. 배열에 대해 이해하고 배열의 사용 목적을 이해할 수 있다. */
        /* 필기.
        *   배열이란?
        *   동일한 자료형의 묶음(연속된 메모리 공간에 값을 저장하고 사용하기 위한 용도)이다.
        *   배열은 heap 영역에 new 연산자를 이용하여 할당한다.
        * */

        /* 필기.
        *   배열의 사용 이유
        *   만약 배열을 사용하지 않는다면 변수를 여러 개 사용해야 한다.
        *   1. 연속된 메모리 공간으로 관리할 수 없다.
        *   2. 반복문을 이용한 연속 처리가 불가능하다.
        * */

        /* 목차. 배열의 선언 및 할당 */
        int[] arr = new int[5];

        System.out.println("arr = " + arr);    // arr = [I@23fc625e값이 나온다→ 주소를 보관하고 있다

        /* 필기. 하나의 이름으로 관리되는 연속된 메모리 공간이고, 공간마다 찾아갈 수 있는 번호(인덱스)를 이용해 접근한다. */
        arr[0] = 10 ;      // 0번째라는 인덱스에 10이라는 값을 넣어준 것이다.
        arr[1] = 20;
        arr[2] = 30;
        arr[3] = 40;
        arr[4] = 50;

        System.out.println("arr[0] : " + arr[0]);
        // 하나로 묶어놓은 변수값이므로, 0번째 공간의 것을 불러올때 해당하는 값인 10이 나온 것이다.
        // 다만, 위의 주석처리하고 출력만 하면 기본 공간값인 0이 나온다.
        System.out.println("arr[1] : " + arr[1]);
        System.out.println("arr[2] : " + arr[2]);
        System.out.println("arr[3] : " + arr[3]);
        System.out.println("arr[4] : " + arr[4]);

        /* 필기.
        *   값의 형태 별 기본 값
        *   - 정수: 0
        *   - 실수: 0.0
        *   - 논리: false
        *   - 문자: \u0000 (유니코드임~~)
        *   - 참조: null
        * */

        /* 필기.
        *   자바에서 지정한 기본값 외의 값으로 초기화 하고 싶으면 블럭({}) 을 이용한다.
        *   블럭({})을 사용하는 경우에는 new 를 사용하지 않아도 되며, 값의
        *   개수 만큼 자동으로 크기가 설정된다.
        * */

        int[] iarr3 = new int[5];
        iarr3[0] = 10;
        iarr3[1] = 10;
        iarr3[2] = 10;
        iarr3[3] = 10;
        iarr3[4] = 10;

        int[] iarr4 = {10, 20, 30, 40, 50};  // 훨~씬 간단하게 쓸 수 있는 방법!(위의 식과 동일하다/ 제일간편!!)
        int[] iarr5 = new int[] {10, 20, 30, 40, 50, 60}; // 이렇게도 공간을 만들어 사용할 수 있음 보여줌(위와 같은 방식이다!)

        System.out.println("iarr4의 길이 : " + iarr4.length); // 개수 알 수 있다. 5 나옴~!!
        System.out.println("iarr5의 길이 : " + iarr5.length); // 개수 알 수 있다. 6 나옴~!!

        for(int i = 0; i < iarr5.length; i++){       //arr5의 길이므로 6개(0~5)
            System.out.println("iarr5[" + i + "]"+ iarr5[i]);
        }

        //문자열 배열도 만들어 보자.
        String[] sarr = {"apple", "banana", "grape", "orange"};

        for (int i = 0; i < sarr.length; i++){      // 배열의 초기값은 0이니깐~~, sarr.legnth: 변수(sarr)의 길이

            System.out.println("sarr[" + i + "]" + " = " + sarr[i]);
        }

        /* 필기.
        *   배열의 사용 방법
        *   1. 배열의 선언
        *   2. 배열의 할당
        *   3. 배열의 인덱스 공간에 값 대입
        * */

        /* 목차. 1. 배열의 선언 */
        /* 필기.
        *   자료형[] 변수명;
        *   자료형 변수명[];
        *   이런 식으로 선언을 할 수 있다.
        * */
        int num2;
        num2 = 10;

        /* 필기. 선언은 stack 에 배열의 주소(값이 아닌)를 보관할 수 있는 공간을 만드는 것이다. */
        int[] num;                  //배열인것을 알려주는 것: [] (만 추가된것)
        num = new int[5];

        char[] cnum;
        int num1[];                // []을 뒤에도 사용하긴 하지만, 잘 사용 안한다.

        /* 필기.
        *   선언한 레퍼런스변수에 배열을 할당하여 대입할 수 있다.
        *   new 연산자는 heap 영역에 공간을 할당하고 발생한 주소값을 반환하는 연산자이다.
        *   발생한 주소를 래퍼런스 변수(참조형 변수)에 저장하고 이것을 참조하여
        *   사용하기 때문에 참조자료형(reference type) 이라고 한다.
        *  */

        /*필기. 배열을 할당할 시에는 반드시 배열의 크기를 지정해 주어야 한다. */
        int[] iarr;             // int 자료형에 iarr을 넣어준 것이고(여러개에서 iarr이라는 변수 하나로 넣은 것),
//        iarr = new int[];       // (공간을 할당 하는 것) 크기를 지정해 주어야 한다!!
        iarr = new int [5];

        /* 필기. 위의 선언과 할당을 동시에 할 수 있다. */
        int[] iarr2 = new int[5];

    }
}
